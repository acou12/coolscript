const native = eval;const say=native("console.log");const quine=(()=>(say("quine();")));const at=native("(i) => (a) => a.at(i)");const concat=native("(b) => (a) => a.concat(b)");const slice=((from)=>((to)=>((array)=>((((from < to))?((()=>(concat(slice((from + 1))(to)(array))([at(from)(array)])))()):((()=>([]))()))))));const length=native("a => a.length");const forEach=((f)=>((array)=>((((length(array) != 0))?((()=>(f(at(0)(array)),forEach(f)(slice(1)(length(array))(array))))()):(()=>{})))));const range=((from)=>((to)=>((((from <= to))?((()=>(concat(range((from + 1))(to))([from])))()):((()=>([]))())))));const keywordRange=((from)=>((to)=>((leftInclusive)=>((rightInclusive)=>(range((from + ((leftInclusive)?((()=>(0))()):((()=>(1))()))))((to - ((rightInclusive)?((()=>(0))()):((()=>(1))())))))))));const map=((f)=>((arr)=>((((length(arr) == 0))?((()=>([]))()):((()=>(concat(map(f)(slice(1)(length(arr))(arr)))([f(at(0)(arr))])))())))));const filter=((f)=>((arr)=>((((length(arr) == 0))?((()=>([]))()):((()=>(((f(at(0)(arr)))?((()=>(concat(filter(f)(slice(1)(length(arr))(arr)))([at(0)(arr)])))()):((()=>(filter(f)(slice(1)(length(arr))(arr))))()))))())))));const random=native("Math.random");const floor=native("Math.floor");const randomInt=((low)=>((high)=>((floor((random() * (high - low))) + low))));let result=1;const _42__42_=((x)=>((y)=>((result = 1),(()=>{for(i of range(1)(y)){((result = (result * x)))}})(),result)));const collatz=((x)=>(((((x % 2) == 0))?((()=>((x / 2)))()):((()=>(((3 * x) + 1)))()))));let x=keywordRange(1)(1000)(true)(true);(()=>{for(i of keywordRange(1)(30)(true)(true)){((x = map(collatz)(x)),say(at(10)(x)))}})();say(filter(((x)=>((x > 4))))(x));