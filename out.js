const native = eval;const say=native("console.log");const quine=(()=>(say("quine();")));const at=native("(i) => (a) => a.at(i)");const concat=native("(b) => (a) => a.concat(b)");const slice=((from)=>((to)=>((array)=>((((from < to))?((()=>(concat(slice((from + 1))(to)(array))([at(from)(array)])))()):((()=>([]))()))))));const length=native("a => a.length");const forEach=((f)=>((array)=>((((length(array) != 0))?((()=>(f(at(0)(array)),forEach(f)(slice(1)(length(array))(array))))()):(()=>{})))));const range=((from)=>((to)=>((((from <= to))?((()=>(concat(range((from + 1))(to))([from])))()):((()=>([]))())))));const map=((f)=>((arr)=>((((length(arr) == 0))?((()=>([]))()):((()=>(concat(map(f)(slice(1)(length(arr))(arr)))([f(at(0)(arr))])))())))));const random=native("Math.random");const floor=native("Math.floor");const randomInt=((low)=>((high)=>((floor((random() * (high - low))) + low))));const _43__43_=((a)=>((b)=>(concat(b)(a))));const _43__42_=((a)=>((b)=>((((b == 0))?((()=>([]))()):((()=>(_43__43_(a)(_43__42_(a)((b - 1)))))())))));say(_43__43_([1, 2])([3, 4]));say(_43__43_(_43__43_([1, 2])([3, 4]))([5, 6]));say(_43__42_([1, 2, 3])(6));say(_43__42_(_43__43_([1, 2])([3, 4]))(3));const _124__60_=((arr)=>((x)=>((((length(arr) == 0))?((()=>(false))()):((()=>((((at(0)(arr) == x))?((()=>(true))()):((()=>(_124__60_(slice(1)(length(arr))(arr))(x)))()))))())))));say();say(_124__60_([1, 2, 3])(3));say(_124__60_([1, 2, 3])(4));