const native = eval;const say=native("console.log");const quine=(()=>(say("quine();")));const at=native("(i) => (a) => a.at(i)");const concat=native("(b) => (a) => a.concat(b)");const slice=((from)=>((to)=>((array)=>((((from < to))?((()=>(concat(slice((from + 1))(to)(array))([at(from)(array)])))()):((()=>([]))()))))));const length=native("a => a.length");const forEach=((f)=>((array)=>((((length(array) != 0))?((()=>(f(at(0)(array)),forEach(f)(slice(1)(length(array))(array))))()):(()=>{})))));const range=((from)=>((to)=>((((from <= to))?((()=>(concat(range((from + 1))(to))([from])))()):((()=>([]))())))));const map=((f)=>((arr)=>((((length(arr) == 0))?((()=>([]))()):((()=>(concat(map(f)(slice(1)(length(arr))(arr)))([f(at(0)(arr))])))())))));const random=native("Math.random");const floor=native("Math.floor");const randomInt=((low)=>((high)=>((floor((random() * (high - low))) + low))));let result=1;const _42__42_=((x)=>((y)=>((result = 1),(()=>{for(i of range(1)(y)){((result = (result * x)))}})(),result)));const _43__43_=((a)=>((b)=>(concat(b)(a))));let arr=[2, 3, 4];(arr = _43__43_(arr)([5]));say(arr);(arr = _43__43_([1])(arr));say(arr);let x=10;(x = (1 / x));say(x);const _42__42__42_=((x)=>((y)=>((result = 1),(()=>{for(i of range(1)(y)){((result = _42__42_(x)(result)))}})(),result)));say(_42__42__42_(2)(4));