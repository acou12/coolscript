const native = eval;const say=native("console.log");const quine=(()=>(say("quine();")));const at=native("(i) => (a) => a.at(i)");const concat=native("(b) => (a) => a.concat(b)");const push=native("(x) => (arr) => arr.push(x)");const slice=native("(x) => (y) => (arr) => arr.slice(x, y)");const length=native("a => a.length");const random=native("Math.random");const floor=native("Math.floor");let i=0;const range=((from)=>((to)=>((arrayResult = []),(i = from),(()=>{while((i <= to)){(push(i)(arrayResult),(i = (i + 1)))}})(),arrayResult)));const keywordRange=((from)=>((to)=>((leftInclusive)=>((rightInclusive)=>(range((from + ((leftInclusive)?((()=>(0))()):((()=>(1))()))))((to - ((rightInclusive)?((()=>(0))()):((()=>(1))())))))))));const map=((f)=>((arr)=>((arrayResult = []),(()=>{for(x of arr){(push(f(x))(arrayResult))}})(),arrayResult)));const forEach=map;const filter=((f)=>((arr)=>((arrayResult = []),(()=>{for(x of arr){(((f(x))?((()=>(push(x)(arrayResult)))()):((()=>(0))())))}})(),arrayResult)));const randomInt=((low)=>((high)=>((floor((random() * (high - low))) + low))));let result=1;const _42__42_=((x)=>((y)=>((result = 1),(()=>{for(i of range(1)(y)){((result = (result * x)))}})(),result)));const collatz=((x)=>(((((x % 2) == 0))?((()=>((x / 2)))()):((()=>(((3 * x) + 1)))()))));let arr=keywordRange(1)(100000)(true)(true);(()=>{for(i of keywordRange(1)(1000)(true)(true)){((f = map(collatz)),(arr = f(arr)),((((i % 100) == 0))?((()=>(say((i + ": ")),say(filter(((x)=>((x > 4))))(arr))))()):(()=>{})))}})();