const native = eval;const say=native("console.log");const quine=say("quine();");const factorial=(((n)=>{return (((n <= 1))?(((()=>{return 1})())):(((()=>{return (n * factorial((n - 1)))})())))}));const factTen=factorial(10);say(factTen);(((factTen > 1000000))?(((()=>{say("dang, that's big!");const equalityIsSymmetric=(1 == 1);const equalityProperty=((equalityIsSymmetric)?(((()=>{return "symmetric"})())):(((()=>{return "asymmetric"})())));say(("equality is " + equalityProperty));return ((equalityIsSymmetric)?(((()=>{return say("that's what i thought...")})())):(()=>{}))})())):(((()=>{return say("not that big -- unimpressed.")})())));const forLoop=(((left,right,f)=>{return (((left <= right))?(((()=>{f(left);return forLoop((left + 1),right,f)})())):(()=>{}))}));say();say("Here are some factorials: ");forLoop(1,10,(((x)=>{return say(((x + "! = ") + factorial(x)))})));const power=native("Math.pow");const twoToTheTen=power(2,10);say();say("Now for fizzes and buzzes: ");forLoop(1,twoToTheTen,(((n)=>{return say(((()=>{const combined=(((((n % 3) == 0))?(((()=>{return "Fizz"})())):(((()=>{return ""})()))) + ((((n % 5) == 0))?(((()=>{return "Buzz"})())):(((()=>{return ""})()))));return (((combined == ""))?(((()=>{return n})())):(((()=>{return combined})())))})()))})));