val say = native("console.log");
val quine = \ -> "quine();".say();

val at = native("(i) => (a) => a.at(i)");
val concat = native("(b) => (a) => a.concat(b)");

val slice(from, to, array) = 
    if (from < to)
        [array.at(from)].concat(array.slice(from + 1, to))
    else
        [];

val length = native("a => a.length");

val forEach(f, array) = if array.length() != 0 {
    f(array.at(0));
    forEach(f, array.slice(1, array.length()))
};

val range(from, to) = if (from <= to) [from].concat(range(from + 1, to)) else [];
val keywordRange(from, to, leftInclusive, rightInclusive) = range(from + (if leftInclusive 0 else 1), to - (if rightInclusive 0 else 1));

val map(f, arr) = 
    if (arr.length() == 0) []
    else [f(arr.at(0))].concat(map(f, arr.slice(1, arr.length())));

val filter(f, arr) =
    if (arr.length() == 0) []
    else if f(arr.at(0)) [arr.at(0)].concat(arr.slice(1, arr.length()).filter(f))
    else arr.slice(1, arr.length()).filter(f);

val random = native("Math.random");
val floor = native("Math.floor");

val randomInt(low, high) = floor(random() * (high - low)) + low;

var result = 1;

val x ** y = {
    result = 1;
    for i in range(1, y) result *= x;
    result;
};

