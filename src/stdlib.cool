val say = native("console.log");
val quine = \ -> "quine();".say();

val at = native("(i) => (a) => a.at(i)");
val concat = native("(b) => (a) => a.concat(b)");
val push = native("(x) => (arr) => arr.push(x)");
val slice = native("(x) => (y) => (arr) => arr.slice(x, y)");
val length = native("a => a.length");
val random = native("Math.random");
val floor = native("Math.floor");

var i = 0;

val range(from, to) = {
    arrayResult = [];
    i = from;    
    while i <= to {
        arrayResult.push(i);
        i += 1;
    };
    arrayResult;
};

val keywordRange(from, to, leftInclusive, rightInclusive) = range(from + (if leftInclusive 0 else 1), to - (if rightInclusive 0 else 1));

val map(f, arr) = {
    arrayResult = [];
    for x in arr {
        arrayResult.push(f(x));
    };
    arrayResult;
};

val forEach = map;

val filter(f, arr) = {
    arrayResult = [];
    for x in arr {
        if f(x) {
            arrayResult.push(x);
        } else {
            0;
        };
    };
    arrayResult;
};

val randomInt(low, high) = floor(random() * (high - low)) + low;

var result = 1;

val x ** y = {
    result = 1;
    for i in range(1, y) result *= x;
    result;
};